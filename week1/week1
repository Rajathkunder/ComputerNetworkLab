Week1

1. Write a program to copy one file to another using file system calls.
#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>

void main()
{
	char buffer;
	int file1, file2;
	file1 = open("first_file.txt",O_RDONLY);
	if(file1 == -1)
	{
		printf("error opening first_file\n");
		close(file1);
		return;
	}
	file2=open("second_file",O_WRONLY|O_CREAT, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);
	while(read(file1,&buffer,1))
	{
		write(file2,&buffer,1);
	}
	printf("successfully copied to second file");
	close(file1);
	close(file2);
}

output:
mca@mcalab05-22:~/mca025/lab/week1$ ./1_copyFile 
successfully copied to second file

2. Write a program to demonstrate the concept of parent & child processes using fork () system call in which the parent reads a file name from the keyboard and child process uses the file name and reads first 10 characters from the file.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() 
{
	char filename[100];
	printf("Enter a filename: ");
	scanf("%s", filename);
	pid_t pid = fork();
	if (pid < 0) 
	{
		perror("Fork failed");
		return 1;
	}
	else if (pid == 0) 
	{
		FILE *file = fopen(filename, "r");
		if (file == NULL) 
		{
			perror("Error opening file");
			return 1;
		}
		char content[11];
		fread(content, sizeof(char), 10, file);
		content[10] = '\0';
		printf("Child: First 10 characters from the file: %s\n", content);
		fclose(file);
	} 
	else 
	{
		wait(NULL);
		printf("Parent: Child process completed.\n");
	}
	return 0;
}

output:
mca@mcalab05-22:~/mca025/lab/week1$ ./2_fork 
Enter a filename: file.txt
Child: First 10 characters from the file: Hello, wel
Parent: Child process completed.


3. Write a program to accept an array before forking and sort the array in child and display.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include<sys/wait.h>

void bubbleSort(int arr[], int n) 
{
	for (int i = 0; i < n - 1; i++) 
	{
		for (int j = 0; j < n - i - 1; j++) 
		{
			if (arr[j] > arr[j + 1]) 
			{
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}

int main() 
{
	int n;
	printf("Enter the number of elements: ");
	scanf("%d", &n);
	int arr[n];
	printf("Enter %d elements: ", n);
	for (int i = 0; i < n; i++) 
	{
		scanf("%d", &arr[i]);
	}
	pid_t pid = fork();
	if (pid < 0) 
	{
		perror("Fork failed");
		return 1;
	} 
	else if (pid == 0) 
	{
		bubbleSort(arr, n);
		printf("Child: Sorted array: ");
		for (int i = 0; i < n; i++) 
		{
			printf("%d ", arr[i]);
		}
		printf("\n");
	} 
	else 
	{
		wait(NULL);
		printf("Parent: Child process completed.\n");
	}
	return 0;
}

output:
mca@mcalab05-22:~/mca025/lab/week1$ ./3_arraySort 
Enter the number of elements: 5
Enter 5 elements: 
8
7
5
15
2
Child: Sorted array: 2 5 7 8 15 
Parent: Child process completed.


4. Write a program to accept an array before forking and search the array in child for an element accepted and display the result.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include<sys/wait.h>

int main() 
{
	int n;
	printf("Enter the number of elements: ");
	scanf("%d", &n);
	int arr[n];
	printf("Enter %d elements: ", n);
	for (int i = 0; i < n; i++) 
	{
		scanf("%d", &arr[i]);
	}
	int searchElement;
	printf("Enter an element to search: ");
	scanf("%d", &searchElement);
	pid_t pid = fork();
	if (pid < 0) 
	{
		perror("Fork failed");
		return 1;
	}
	else if (pid == 0) 
	{
		int found = 0;
		for (int i = 0; i < n; i++) 
		{
			if (arr[i] == searchElement) 
			{
				found = 1;
				break;
			}
		}
		if (found) 
		{
			printf("Child: Element found in the array.\n");
		} 
		else 
		{
			printf("Child: Element not found in the array.\n");
		}
	} 
	else 
	{
		wait(NULL);
		printf("Parent: Child process completed.\n");
	}
	return 0;
}

output:
mca@mcalab05-22:~/mca025/lab/week1$ ./4_arraySearch 
Enter the number of elements: 5
Enter 5 elements: 21
65
84
97
23
Enter an element to search: 84
Child: Element found in the array.
Parent: Child process completed.

5. Write a program to write some characters to a file and close it in the parent. Child should open the same file in child and display.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include<sys/wait.h>

int main() 
{
	FILE *file = fopen("file.txt", "w");
	if (file == NULL) 
	{
		printf("Error creating file");
		return 1;
	}
	fprintf(file, "Hello, this is the parent process writing to the file.\n");
	fclose(file);
	pid_t pid = fork();
	if (pid < 0) 
	{
		perror("Fork failed");
		return 1;
	} 
	else if (pid == 0) 
	{
		file = fopen("file.txt", "r");
		if (file == NULL) 
		{
			perror("Error opening file");
			return 1;
		}
		char buffer[100];
		while (fgets(buffer, sizeof(buffer), file) != NULL) 
		{
			printf("Child: %s", buffer);
		}
		fclose(file);
	} 
	else 
	{
		wait(NULL);
		printf("Parent: Child process completed.\n");
	}
	return 0;
}

output:
mca@mcalab05-22:~/mca025/lab/week1$ ./5_file 
Child: Hello, this is the parent process writing to the file.
Parent: Child process completed.

6. Accept two numbers and operator (+, -, *, /) as command line arguments. Perform numerical operation as per operator in the child and display the result.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    if (argc != 4) {
        printf("Usage: %s num1 num2 operator\n", argv[0]);
        return 1;
    }

    double num1 = atof(argv[1]);
    double num2 = atof(argv[2]);
    char operator = argv[3][0];

    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        return 1;
    } else if (pid == 0) {
        // Child process
        double result;
        switch (operator) {
            case '+':
                result = num1 + num2;
                break;
            case '-':
                result = num1 - num2;
                break;
            case '*':
                result = num1 * num2;
                break;
            case '/':
                if (num2 == 0) {
                    printf("Child: Division by zero not allowed.\n");
                    return 1;
                }
                result = num1 / num2;
                break;
            default:
                printf("Child: Invalid operator.\n");
                return 1;
        }
        printf("Child: Result: %lf\n", result);
    } else {
        // Parent process
        wait(NULL);
        printf("Parent: Child process completed.\n");
    }

    return 0;
}

output:
mca@mcalab05-22:~/mca025/lab/week1$ ./6_commandLine 6 5 \*
Child: Result: 30.000000
Parent: Child process completed.

mca@mcalab05-22:~/mca025/lab/week1$ ./6_commandLine 6 5 +
Child: Result: 11.000000
Parent: Child process completed.

7. Write a program to accept an integer before forking and child has to generate multiplication table corresponding to the integer.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include<sys/wait.h>

int main() {
    int num;
    printf("Enter an integer: ");
    scanf("%d", &num);

    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        return 1;
    } else if (pid == 0) {
        // Child process
        printf("Child: Multiplication table for %d:\n", num);
        for (int i = 1; i <= 10; i++) {
            printf("%d x %d = %d\n", num, i, num * i);
        }
    } else {
        // Parent process
        wait(NULL);
        printf("Parent: Child process completed.\n");
    }

    return 0;
}


output:
mca@mcalab05-22:~/mca025/lab/week1$ ./7_multiplicationTable 
Enter an integer: 6
Child: Multiplication table for 6:
6 x 1 = 6
6 x 2 = 12
6 x 3 = 18
6 x 4 = 24
6 x 5 = 30
6 x 6 = 36
6 x 7 = 42
6 x 8 = 48
6 x 9 = 54
6 x 10 = 60
Parent: Child process completed.
